openapi: 3.0.0
info:
  title: Boutique Management API
  version: 1.0.0
  description: API documentation for the Boutique Management application

servers:
  - url: http://localhost:8000/api  

security:
  - BearerAuth: []
  

paths:
  /login:
    post:
      summary: Authenticate a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  format: email
                  example: bakemono_san
                password:
                  type: string
                  example: Pourquoipas34$
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Authentication token
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/logout:
    post:
      summary: Log out a user
      tags:
        - Authentication
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /v1/role:
    post:
      summary: Create a new role
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreRoleRequest'
      responses:
        '201':
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      summary: Get a list of users
      tags:
        - Users
      parameters:
        - in: query
          name: role
          schema:
            type: string
            enum: [ADMIN, BOUTIQUIER, CLIENT]
          description: Filter users by role
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the user to retrieve
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /register:
    post:
      summary: Register a user for a client
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userForClientRequest'
      responses:
        '201':
          description: User and client created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserResource'
                  client:
                    $ref: '#/components/schemas/ClientResource'

  /v1/clients:
    get:
      summary: Get a list of clients
      tags:
        - Clients
      responses:
        '200':
          description: A list of clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
    post:
      summary: Create a new client
      tags:
        - Clients
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreClientRequest'
      responses:
        '201':
          description: Client created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/clients/{id}:
    get:
      summary: Get a client by ID
      tags:
        - Clients
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the client to retrieve
      responses:
        '200':
          description: A single client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/clients/{id}/user:
    get:
      summary: Get the user associated with a client
      tags:
        - Clients
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the client
      responses:
        '200':
          description: User associated with the client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/clients/{id}/dettes:
    get:
      summary: Get debts associated with a client
      tags:
        - Clients
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the client
      responses:
        '200':
          description: List of debts for the client
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Debt'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/articles:
    get:
      summary: Get a list of articles
      tags:
        - Articles
      responses:
        '200':
          description: A list of articles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
    post:
      summary: Create a new article
      tags:
        - Articles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreArticleRequest'
      responses:
        '201':
          description: Article created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/articles/{id}:
    get:
      summary: Get an article by ID
      tags:
        - Articles
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the article to retrieve
      responses:
        '200':
          description: A single article
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '404':
          description: Article not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update an article by ID
      tags:
        - Articles
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the article to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArticleRequest'
      responses:
        '200':
          description: Article updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Article not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete an article by ID
      tags:
        - Articles
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the article to delete
      responses:
        '200':
          description: Article deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Article not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/articles/libelle:
    post:
      summary: Get articles by libelle
      tags:
        - Articles
      parameters:
        - in: query
          name: libelle
          required: true
          schema:
            type: string
          description: The libelle of the articles to retrieve
      responses:
        '200':
          description: A list of articles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
        '404':
          description: Article not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/articles/stock:
    post: 
      summary: Update article stock
      tags:
        - Articles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreArticleRequest'
      responses:
        '200':
          description: Article updated successfully
        '404':
          description: Article not found
  
  /v1/dettes:
    get:
      summary: Get a list of all dettes
      description: Returns all debts
      tags:
        - Dettes
      responses:
        '200':
          description: A list of dettes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dette'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new demande
      tags:
        - Dettes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreDetteRequest'
      responses:
        '201':
          description: Dette created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dette'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
  /v1/dettes/{id}:
    get:
      summary: Get a specific dette
      description: Returns a specific debt record by its ID
      tags:
        - Dettes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the dette to retrieve
      responses:
        '200':
          description: A single dette
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dette'
        '404':
          description: Dette not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  
  /v1/dettes/{id}/articles:
    get:
      summary: Get articles related to a dette
      description: Returns the articles linked to a specific dette
      tags:
        - Dettes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the dette
      responses:
        '200':
          description: List of articles related to the dette
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
        '404':
          description: Dette not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /v1/dettes/{id}/paiements:
    get:
      summary: Get paiements related to a dette
      description: Returns the list of paiements for a specific dette
      tags:
        - Dettes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the dette
      responses:
        '200':
          description: List of paiements related to the dette
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Paiement'
        '404':
          description: Dette not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /v1/dettes/{id}/payer:
    post:
      summary: Make a payment for a dette
      description: Pay a portion or full amount of a dette
      tags:
        - Dettes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the dette
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorePaiementRequest'
      responses:
        '200':
          description: Payment successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dette'
        '400':
          description: Invalid payment data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /demandes/{id}/disponible:
    get:
      summary: Get articles stats for a demande
      tags:
        - Demandes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the demande
      responses:
        '200':
          description: Article stats for the demande
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArticleStats'
        '404':
          description: Demande not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /demandes/notifications:
    get:
      summary: Get notifications for demandes
      tags:
        - Demandes
      responses:
        '200':
          description: Notifications for demandes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '404':
          description: Demande not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /demandes/all:
    get:
      summary: Get a list of all demandes
      tags:
        - Demandes
      responses:
        '200':
          description: A list of demandes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Demande'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /demandes/{id}:
    patch:
      summary: Traiter une demande
      tags:
        - Demandes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the demande to retrieve
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TraitementDemandeRequest'
      responses:
        '200':
          description: Demande traitée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Demande'
        '404':
          description: Demande non trouvée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /demandes/notifications/client:
    get:
      summary: Get notifications for demandes
      tags:
        - Demandes
      responses:
        '200':
          description: Notifications for demandes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '404':
          description: Demande not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /demandes:
    get:
      summary: Get a list of my demandes
      tags:
        - Demandes
      responses:
        '200':
          description: A list of my demandes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Demande'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new demande
      tags:
        - Demandes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreDemandeRequest'
      responses:
        '201':
          description: Demande created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Demande'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /demandes/notifications/test:
    get:
      summary: Get notifications of responses
      tags:
        - Demandes
      responses:
        '200':
          description: Notifications for responses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '404':
          description: Demande not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /notification/client/all:
    post:
      summary: Send group notification to clients
      description: Sends a reminder notification to all clients with their outstanding debts.
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendGroupeRequest'
      responses:
        '200':
          description: Notifications sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  clients:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: ID of the client
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  erreur:
                    type: object
                    additionalProperties:
                      type: string

  /notification/client/message:
    post:
      summary: Send custom message to clients
      description: Sends a custom message to all clients.
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendGroupeMessageRequest'
      responses:
        '200':
          description: Notifications sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  clients:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: ID of the client
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  erreur:
                    type: object
                    additionalProperties:
                      type: string


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: Invalid request

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: Success

    Role:
      type: object
      properties:
        id:
          type: string
          example: 123
        name:
          type: string
          example: Admin

    User:
      type: object
      properties:
        id:
          type: string
          example: 123
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: user@example.com
        role:
          type: string
          example: Admin

    Client:
      type: object
      properties:
        id:
          type: string
          example: 123
        name:
          type: string
          example: Jane Doe
        phone:
          type: string
          example: +1234567890
        address:
          type: string
          example: 123 Main St
        photo:
          type: string
          format: uri
          example: http://example.com/photo.jpg

    Debt:
      type: object
      properties:
        id:
          type: string
          example: 123
        client_id:
          type: string
          example: 456
        amount:
          type: number
          format: float
          example: 150.75
        amount_paid:
          type: number
          format: float
          example: 50.00
        remaining_amount:
          type: number
          format: float
          example: 100.75
        quantity:
          type: integer
          example: 5
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'
        sold_amount:
          type: number
          format: float
          example: 75.00

    Article:
      type: object
      properties:
        id:
          type: string
          example: 123
        name:
          type: string
          example: Product A
        price:
          type: number
          format: float
          example: 30.00

    StoreRoleRequest:
      type: object
      properties:
        name:
          type: string
          example: Admin

    StoreUserRequest:
      type: object
      properties:
        nom:
          type: string
          example: Doe
        prenom:
          type: string
          example: John
        password:
          type: string
          example: Pourquoipas34$
        password_confirmation:
          type: string
          example: Pourquoipas34$
        role_id:
          type: integer
          example: 1
        etat:
          type: boolean
          example: true
        login:
          type: string
          example: bakemono
        photo:
          type: string
          format: binary

    userForClientRequest:
      type: object
      required:
        - login
        - password
        - nom
        - prenom
        - etat
        - role_id
        - client_id
      properties:
        login:
          type: string
        password:
          type: string
        nom:
          type: string
        prenom:
          type: string
        etat:
          type: string
          enum: [true, false]
        role_id:
          type: integer
        client_id:
          type: integer  

    StoreClientRequest:
      type: object
      properties:
        surname:
          type: string
          example: Jane Doe
        telephone:
          type: string
          example: +1234567890
        adress:
          type: string
          example: 123 Main St
        photo:
          type: string
          format: uri
          example: http://example.com/photo.jpg
        categorie_id:
          type: integer
        montant_max:
          type: number
          format: float
          example: 1000.00
        

    UpdateArticleRequest:
      type: object
      properties:
        name:
          type: string
          example: Updated Product A
        price:
          type: number
          format: float
          example: 35.00

    StoreArticleRequest:
      type: object
      properties:
        libelle:
          type: string
        user_id:
          type: string
        prix:
          type: number
          format: float
        quantite:
          type: integer
        seuil:
          type: integer
    
    ArticleStats:
      type: object
      properties:
        article_id:
          type: string
          example: 123
        article_name:
          type: string
          example: Article X
        article_quantite_commande:
          type: integer
          example: 10
        article_quantite:
          type: integer
          example: 5
        disponible:
          type: boolean
          example: true
    
    Notification:
      type: object
      properties:
        id:
          type: string
          example: 123
        demande_id:
          type: string
        user_id:
          type: string
        message:
          type: string
          example: Demande de retrait de produit Article X est disponible.
        date:
          type: string
        seen:
          type: boolean
          example: false
        read:
          type: boolean
          example: false
      
    ClientResource:
      type: object
      properties:
        id:
          type: integer
        nom:
          type: string
        prenom:
          type: string
        email:
          type: string
        user_id:
          type: integer
    
    UserResource:
      type: object
      properties:
        id:
          type: string
        nom:
          type: string
        prenom:
          type: string
        login:
          type: string
        role_id:
          type: integer
        etat:
          type: string
        password:
          type: string

    StorePaiementRequest:
      type: object
      required:
        - montant
      properties:
        montant:
          type: number
          format: float
          description: Amount of the payment
          example: 100.50
    
    Paiement:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the payment
        montant:
          type: number
          format: float
          description: Amount of the payment
        created_at:
          type: string
          format: date-time
          description: Date and time when the payment was created
        updated_at:
          type: string
          format: date-time
          description: Date and time when the payment was last updated
    
    StoreDetteRequest:
      type: object
      required:
        - montant
        - client_id
        - articles
      properties:
        montant:
          type: number
          format: float
          description: Amount of the debt
          example: 100.00
        client_id:
          type: integer
          description: ID of the client associated with the debt
          example: 1
        articles:
          type: array
          items:
            type: object
            required:
              - id
              - quantite
              - prixVente
            properties:
              id:
                type: integer
                description: ID of the article
                example: 1
              quantite:
                type: integer
                description: Quantity of the article
                example: 2
              prixVente:
                type: number
                format: float
                description: Selling price of the article
                example: 50.00
        paiement:
          type: object
          properties:
            montant:
              type: number
              format: float
              description: Amount of the payment
              example: 50.00
    Dette:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the debt
        montant:
          type: number
          format: float
          description: Amount of the debt
        client_id:
          type: integer
          description: ID of the client associated with the debt
        articles:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              quantite:
                type: integer
              prixVente:
                type: number
                format: float
        paiement:
          type: object
          properties:
            montant:
              type: number
              format: float
        created_at:
          type: string
          format: date-time
          description: Date and time when the debt was created
        updated_at:
          type: string
          format: date-time
          description: Date and time when the debt was last updated
    StoreDemandeRequest:
      type: object
      required:
        - montant
        - articles
      properties:
        montant:
          type: number
          format: float
          description: Amount of the demand
          example: 150.00
        articles:
          type: array
          items:
            type: object
            required:
              - id
              - quantite
            properties:
              id:
                type: integer
                description: ID of the article
                example: 2
              quantite:
                type: integer
                description: Quantity of the article
                example: 5
    Demande:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the demand
        montant:
          type: number
          format: float
          description: Amount of the demand
        articles:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              quantite:
                type: integer
        created_at:
          type: string
          format: date-time
          description: Date and time when the demand was created
        updated_at:
          type: string
          format: date-time
          description: Date and time when the demand was last updated
    SendGroupeRequest:
      type: object
      required:
        - clients
      properties:
        clients:
          type: array
          items:
            type: object
            required:
              - id
            properties:
              id:
                type: integer
                description: ID of the client
                example: 1

    SendGroupeMessageRequest:
      type: object
      required:
        - clients
        - message
      properties:
        clients:
          type: array
          items:
            type: object
            required:
              - id
            properties:
              id:
                type: integer
                description: ID of the client
                example: 1
        message:
          type: string
          description: Custom message to send to clients
          example: "Please settle your outstanding debt before the end of the month."
    
    TraitementDemandeRequest:
      type: object
      required:
        - reponse
      properties:
        reponse:
          type: string
          description: Response to the demand
          example: Valider